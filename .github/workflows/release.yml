name: Release and Publish

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test-before-release:
    name: Pre-Release Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Run all tests
      run: node test/run-tests.js
      
    - name: Validate package version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch!"
          exit 1
        fi

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: test-before-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Create distribution package
      run: |
        mkdir -p dist
        cp -r examples dist/
        cp response.schema.json dist/
        cp response.d.ts dist/
        cp README.md dist/
        cp LICENSE dist/
        cp package.json dist/
        
    - name: Create ZIP archive
      run: |
        cd dist
        zip -r ../json-response-standard-${{ github.ref_name }}.zip .
        cd ..
        
    - name: Create TAR archive
      run: |
        cd dist
        tar -czf ../json-response-standard-${{ github.ref_name }}.tar.gz .
        cd ..
        
    - name: Upload ZIP to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./json-response-standard-${{ github.ref_name }}.zip
        asset_name: json-response-standard-${{ github.ref_name }}.zip
        asset_content_type: application/zip
        
    - name: Upload TAR to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./json-response-standard-${{ github.ref_name }}.tar.gz
        asset_name: json-response-standard-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: test-before-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci --ignore-scripts
      
    - name: Run tests
      run: node test/test.js
      
    - name: Publish to NPM
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: test-before-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## ${{ github.ref_name }} - $(date '+%Y-%m-%d')" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Release notes for version ${{ github.ref_name }}" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Features" >> CHANGELOG.md
        echo "- JSON Response Standard implementation" >> CHANGELOG.md
        echo "- Multi-language support (JavaScript, Python, PHP)" >> CHANGELOG.md
        echo "- Comprehensive testing suite" >> CHANGELOG.md
        echo "- TypeScript definitions" >> CHANGELOG.md
        echo "- JSON schema validation" >> CHANGELOG.md
        
    - name: Update version badge in README
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        sed -i "s/version-[0-9.]*/version-$VERSION/" README.md || true

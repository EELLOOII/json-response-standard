name: JSON Response Standard Tests

on:
  push:
    branches: [ main, develop, staging, test-* ]
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  test-languages:
    name: Language Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Test core languages with multiple versions
        include:
          - language: javascript
            runtime: node
            version: "16"
            setup_action: actions/setup-node@v5
            version_param: node-version
          - language: javascript
            runtime: node
            version: "18"
            setup_action: actions/setup-node@v5
            version_param: node-version
          - language: javascript
            runtime: node
            version: "20"
            setup_action: actions/setup-node@v5
            version_param: node-version
          - language: javascript
            runtime: node
            version: "22"
            setup_action: actions/setup-node@v5
            version_param: node-version
          - language: python
            runtime: python
            version: "3.8"
            setup_action: actions/setup-python@v6
            version_param: python-version
          - language: python
            runtime: python
            version: "3.9"
            setup_action: actions/setup-python@v6
            version_param: python-version
          - language: python
            runtime: python
            version: "3.10"
            setup_action: actions/setup-python@v6
            version_param: python-version
          - language: python
            runtime: python
            version: "3.11"
            setup_action: actions/setup-python@v6
            version_param: python-version
          - language: python
            runtime: python
            version: "3.12"
            setup_action: actions/setup-python@v6
            version_param: python-version
          - language: php
            runtime: php
            version: "7.4"
            setup_action: shivammathur/setup-php@v2
            version_param: php-version
          - language: php
            runtime: php
            version: "8.0"
            setup_action: shivammathur/setup-php@v2
            version_param: php-version
          - language: php
            runtime: php
            version: "8.1"
            setup_action: shivammathur/setup-php@v2
            version_param: php-version
          - language: php
            runtime: php
            version: "8.2"
            setup_action: shivammathur/setup-php@v2
            version_param: php-version
          - language: php
            runtime: php
            version: "8.3"
            setup_action: shivammathur/setup-php@v2
            version_param: php-version
          - language: go
            runtime: go
            version: "1.19"
            setup_action: actions/setup-go@v5
            version_param: go-version
          - language: go
            runtime: go
            version: "1.20"
            setup_action: actions/setup-go@v5
            version_param: go-version
          - language: go
            runtime: go
            version: "1.21"
            setup_action: actions/setup-go@v5
            version_param: go-version
          - language: go
            runtime: go
            version: "1.22"
            setup_action: actions/setup-go@v5
            version_param: go-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup ${{ matrix.runtime }} ${{ matrix.version }}
      uses: ${{ matrix.setup_action }}
      with:
        ${{ matrix.version_param }}: ${{ matrix.version }}
        
    - name: Setup Node.js for test runner
      if: matrix.runtime != 'node'
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Install dependencies (if any)
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          echo "No package-lock.json found, skipping npm ci"
        fi
      
    - name: Run tests for ${{ matrix.language }}
      run: node test/run-tests.js ${{ matrix.language }}
      continue-on-error: false

  test-all-languages:
    name: All Languages Integration Test
    runs-on: ubuntu-latest
    needs: [test-languages]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install npm dependencies (if any)
      run: |
        if [ -f package-lock.json ]; then
          npm ci --ignore-scripts
        else
          echo "No package-lock.json found, skipping npm ci"
        fi
      
    - name: Run all available language tests
      run: |
        echo "üöÄ Running all available language tests dynamically..."
        node test/run-tests.js
        
    - name: Verify core project files
      run: |
        echo "‚úÖ Verifying core project files..."
        test -f response.schema.json
        test -f response.d.ts
        test -f package.json
        test -f README.md
        echo "‚úÖ All core files verified!"

  test-windows:
    name: Windows Compatibility Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Run all available tests on Windows
      shell: pwsh
      run: |
        Write-Host "ü™ü Running all available language tests on Windows..."
        node test/run-tests.js
        Write-Host "‚úÖ Windows compatibility tests completed!"

  test-macos:
    name: macOS Compatibility Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Run all available tests on macOS
      run: |
        echo "üçé Running all available language tests on macOS..."
        node test/run-tests.js
        echo "‚úÖ macOS compatibility tests completed!"

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Check file structure
      run: |
        echo "Checking project structure..."
        echo "‚úÖ Checking examples directory..."
        test -d examples/
        echo "‚úÖ Checking test directory..."
        test -d test/
        echo "‚úÖ Checking package.json..."
        test -f package.json
        echo "‚úÖ Checking README.md..."
        test -f README.md
        echo "‚úÖ Checking LICENSE..."
        test -f LICENSE
        echo "‚úÖ All required files and directories found"
        
    - name: Validate JSON schema
      run: |
        echo "Validating JSON schema..."
        node -e "
          try {
            const schema = JSON.parse(require('fs').readFileSync('response.schema.json', 'utf8'));
            console.log('‚úÖ JSON schema is valid');
          } catch (error) {
            console.error('‚ùå JSON schema validation failed:', error.message);
            process.exit(1);
          }
        "
        
    - name: Check TypeScript definitions
      run: |
        echo "Checking TypeScript definitions..."
        test -f response.d.ts
        
    - name: Validate package.json
      run: |
        echo "Validating package.json..."
        node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        SENSITIVE_FILES=$(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -v node_modules || true)
        if [ -n "$SENSITIVE_FILES" ]; then
          echo "‚ö†Ô∏è  Sensitive files found:"
          echo "$SENSITIVE_FILES"
          exit 1
        else
          echo "‚úÖ No sensitive files found"
        fi

  test-docker:
    name: Docker Container Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js for generators
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        
    - name: Generate dynamic Docker configurations
      run: |
        echo "üîß Generating dynamic Docker configurations..."
        node scripts/generate-dockerfile.js --available
        node scripts/generate-docker-compose.js --override
        echo "‚úÖ Dynamic configurations generated!"
        
    - name: Build Docker image with dynamic Dockerfile
      run: |
        if [ -f Dockerfile.generated ]; then
          docker build -f Dockerfile.generated -t json-response-standard-test .
        else
          docker build -t json-response-standard-test .
        fi
      
    - name: Run all tests in Docker
      run: docker run json-response-standard-test
      
    - name: Test Docker Compose main service
      run: |
        docker compose up --build --abort-on-container-exit json-response-standard
        
    - name: Test discovered language containers dynamically
      run: |
        echo "üê≥ Testing discovered language containers..."
        
        # Get list of available services
        available_services=$(docker compose config --services 2>/dev/null || echo "")
        
        if [ -n "$available_services" ]; then
          echo "Available services: $available_services"
          
          # Test each language service if it exists
          for service in $available_services; do
            if [[ $service == test-* ]]; then
              echo "Testing $service..."
              if docker compose up --build --abort-on-container-exit $service; then
                echo "‚úÖ $service passed"
              else
                echo "‚ùå $service failed"
              fi
            fi
          done
        else
          echo "No additional services found, testing individual languages..."
          
          # Fallback: test known patterns
          for lang in javascript python php go rust java csharp ruby; do
            service="test-$lang"
            if docker compose config --services 2>/dev/null | grep -q "^$service$"; then
              echo "Testing $service..."
              docker compose up --build --abort-on-container-exit $service || echo "‚ö†Ô∏è  $service failed (expected if language not implemented)"
            fi
          done
        fi
        
        echo "‚úÖ Dynamic container testing completed!"

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [test-all-languages, code-quality, security-audit, test-docker]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Build for staging
      run: |
        echo "Building for staging environment..."
        # Add your staging build commands here
        # For example: npm run build:staging
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Add your deployment commands here
        # This could be deploying to a staging server, updating documentation, etc.
        
    - name: Notify deployment
      run: |
        echo "‚úÖ Staging deployment completed successfully"
        echo "Staging URL: https://staging.json-response-standard.example.com"
        # You can add Slack/Discord notifications here if needed
